---

- name: Install WireGuard packages
  ansible.builtin.apt:
    name:
      - wireguard
    state: present

- name: Set net.ipv4.ip_forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present

- name: Set net.ipv6.conf.all.forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present

- name: Enable WireGuard kernel module
  community.general.modprobe:
    name: wireguard
    state: present
  register: wireguard__register_module_enabled
  until: wireguard__register_module_enabled is succeeded
  retries: 10
  delay: 10
  failed_when: wireguard__register_module_enabled is failure

- name: Set default for WireGuard interface restart behavior
  ansible.builtin.set_fact:
    wireguard__restart_interface: >-
      {%- if wireguard_interface_restart -%}
      true
      {%- else -%}
      false
      {%- endif %}

- name: Get available wg subcommands
  ansible.builtin.command: "wg --help"
  register: wireguard__register_subcommands
  changed_when: false
  check_mode: false

- name: Check if wg syncconf subcommand is available
  ansible.builtin.set_fact:
    wireguard__syncconf_avail: "{{ 'syncconf:' in wireguard__register_subcommands.stdout }}"

- name: wg syncconf subcommand available
  ansible.builtin.debug:
    var: wireguard__syncconf_avail

- name: Fall back to interface restart if wg syncconf is not available
  ansible.builtin.set_fact:
    wireguard__restart_interface: true
  when:
    - not wireguard__syncconf_avail

- name: Final decision on WireGuard interface restart method
  ansible.builtin.debug:
    msg: >-
      {%- if wireguard__restart_interface -%}
      'restart'
      {%- else -%}
      'syncconf'
      {%- endif %}

- name: Register if config/private key already exists on target host
  ansible.builtin.stat:
    path: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
  register: wireguard__register_config_file
  tags:
    - wg-generate-keys
    - wg-config

- name: Generate WireGuard private key
  ansible.builtin.command: "wg genkey"
  register: wireguard__register_private_key
  changed_when: false

- name: Set private key fact
  ansible.builtin.set_fact:
    wireguard_private_key: "{{ wireguard__register_private_key.stdout }}"

- name: Derive WireGuard public key
  ansible.builtin.command: "wg pubkey"
  args:
    stdin: "{{ wireguard_private_key }}"
  register: wireguard__register_public_key
  changed_when: false
  check_mode: false

- name: Set public key fact
  ansible.builtin.set_fact:
    wireguard__fact_public_key: "{{ wireguard__register_public_key.stdout }}"

- name: Create WireGuard configuration directory
  ansible.builtin.file:
    dest: "{{ wireguard_remote_directory }}"
    state: directory
    mode: 0700

- name: Generate WireGuard configuration file
  ansible.builtin.template:
    src: wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: "{{ wireguard_conf_owner }}"
    group: "{{ wireguard_conf_group }}"
    mode: "{{ wireguard_conf_mode }}"
  notify:
    - reconfigure wireguard

- name: Ensure legacy reload-module-on-update is absent
  ansible.builtin.file:
    dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
    state: absent

- name: Start and enable WireGuard service
  ansible.builtin.service:
    name: "wg-quick@{{ wireguard_interface }}"
    state: "{{ wireguard_service_state }}"
    enabled: "{{ wireguard_service_enabled }}"
  when: not ansible_os_family == 'Darwin'
